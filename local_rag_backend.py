from langchain_community.vectorstores import Chroma
from langchain_community.chat_models import ChatOllama
from langchain_community.embeddings import FastEmbedEmbeddings
from langchain.schema.output_parser import StrOutputParser
from langchain_community.document_loaders import PyPDFLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.schema.runnable import RunnablePassthrough
from langchain.prompts import PromptTemplate
from langchain_community.vectorstores.utils import filter_complex_metadata


class ChatPDF:
    """
    A class to implement a local Retrieval-Augmented Generation (RAG) system for querying PDF documents.

    Attributes:
        vector_store (Chroma): The vector store for storing and retrieving document embeddings.
        retriever (Retriever): The retriever used to fetch relevant document chunks.
        chain (Pipeline): A pipeline combining retrieval, prompt formatting, and response generation.

    Methods:
        ingest(pdf_file_path: str):
            Processes a PDF file, splits it into chunks, generates embeddings, and stores them in a vector database.
        ask(query: str) -> str:
            Answers a question by retrieving relevant document chunks and using an LLM to generate a response.
        clear():
            Resets the vector store, retriever, and pipeline for a fresh start.
    """

    vector_store = None
    retriever = None
    chain = None

    def __init__(self):
        """
        Initializes the ChatPDF class with a local language model, text splitter, and prompt template.
        """
        self.model = ChatOllama(model="mistral")
        self.text_splitter = RecursiveCharacterTextSplitter(chunk_size=1024, chunk_overlap=100)
        self.prompt = PromptTemplate.from_template(
            """
            <s> [INST] You are an intelligent assistant. Use the following context to answer the question. 
            If you don't know the answer, say "I don't know." Provide a concise response in no more than three sentences. [/INST] 
            Question: {question}
            Context: {context}
            Answer: [/INST]
            """
        )

    def ingest(self, pdf_file_path: str):
        """
        Processes a PDF file and prepares the vector database for querying.

        Args:
            pdf_file_path (str): Path to the PDF file.

        Steps:
            - Loads the PDF using PyPDFLoader.
            - Splits the content into manageable chunks.
            - Generates embeddings for the chunks.
            - Stores the embeddings in a Chroma vector database.
            - Sets up a retriever for similarity-based retrieval.

        Raises:
            Exception: If the PDF cannot be processed or embeddings cannot be generated.
        """
        docs = PyPDFLoader(file_path=pdf_file_path).load()
        chunks = self.text_splitter.split_documents(docs)
        chunks = filter_complex_metadata(chunks)

        self.vector_store = Chroma.from_documents(
            documents=chunks,
            embedding=FastEmbedEmbeddings(),
            persist_directory="./chroma_store"
        )
        self.retriever = self.vector_store.as_retriever(
            search_type="similarity_score_threshold",
            search_kwargs={
                "k": 3,
                "score_threshold": 0.5,
            },
        )

        self.chain = ({"context": self.retriever, "question": RunnablePassthrough()}
                      | self.prompt
                      | self.model
                      | StrOutputParser())

    def ask(self, query: str) -> str:
        """
        Answers a user query by retrieving relevant document chunks and generating a response.

        Args:
            query (str): The user's question.

        Returns:
            str: The response generated by the LLM.

        Raises:
            ValueError: If no document has been ingested.
        """
        if not self.chain:
            raise ValueError("Please, add a PDF document first.")
        return self.chain.invoke(query)

    def clear(self):
        """
        Resets the vector store, retriever, and pipeline to allow ingestion of new documents.
        """
        self.vector_store = None
        self.retriever = None
        self.chain = None
